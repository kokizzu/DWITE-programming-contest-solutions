<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
	<head>
		<meta charset="UTF-8"/>
		<title>DWITE • March 2010 • Weak Passwords</title>
		<link rel="stylesheet" href="style.css" type="text/css"/>
	</head>
	<body>
		<header>
			<h1>DWITE Online Computer Programming Contest</h1>
			<div>
				<h2>Weak Passwords</h2>
				<div>
					<div>March 2010</div>
					<div>Problem 5</div>
				</div>
			</div>
		</header>
		<article>
			<p>In secure authentication, one does not necessarily need to provide their password; they just need to prove that they know their own password. The subtle difference allows one to store just an encoded hash of a password. That way, the actual (plaintext) password is never stored, making the system more secure, as the real password is never written down and can’t be stolen, should the system be compromised...</p>
			<p>The input file <strong>DATA5.txt</strong> will contain 5 lines, integers 0 ≤ <var>N</var> ≤ 1,000,000 being the hashes stored in place of the passwords.</p>
			<p>The output file <strong>OUT5.txt</strong> will contain 5 lines, each a 4-character-long password that generates the corresponding input hash.</p>
			<p>Assume that all passwords are four characters long and are made up of capital letters only.</p>
			<p>A hash is calculated as follows: Given a password <var>P</var>, made up of four letters (<var>a</var>1, <var>a</var>2, <var>a</var>3, <var>a</var>4), each letter is turned into its ASCII value where A = 65 and Z = 90, resulting in (<var>n</var>1, <var>n</var>2, <var>n</var>3, <var>n</var>4). Let <var>k</var> = <var>n</var><sub>1</sub>×10<sup>6</sup> + <var>n</var><sub>2</sub>×10<sup>4</sup> + <var>n</var><sub>3</sub>×10<sup>2</sup> + <var>n</var><sub>4</sub>. Let <var>m</var> = <var>n</var><sub>1</sub>×11 + <var>n</var><sub>2</sub>×101 + <var>n</var><sub>3</sub>×1009 + <var>n</var><sub>4</sub>×10007. Then hash(<var>P</var>) = <var>k</var> mod <var>m</var>.</p>
			<p><em>For example:</em> Given a password <var>P</var> = “TONY”, there are four letters <var>a</var><sub>1</sub> = T, <var>a</var><sub>2</sub> = O, <var>a</var><sub>3</sub> = N, <var>a</var><sub>4</sub> = Y. Mapped to ASCII, they become <var>n</var><sub>1</sub> = 84, <var>n</var><sub>2</sub> = 79, <var>n</var><sub>3</sub> = 78, <var>n</var><sub>4</sub> = 89. Then <var>k</var> = 84797889. And <var>m</var> = 84×11 + 79×101 + 78×1009 + 89×10007 = 978228. So hash(TONY) = 84797889 % 978228 = 670281.</p>
			<p><em>Note:</em> Be aware of time constraints. Also, there are cases where multiple passwords result in the same hash. Those hashes are not a part of the test cases.</p>
			<section class="sample">
				<div class="input">
					Sample Input (first three shown):
					<pre>670281
603131
464132</pre>
				</div>
				<div class="output">
					Sample Output (first three shown):
					<pre>TONY
DWTE
PASS</pre>
				</div>
			</section>
		</article>
	</body>
</html>
